Concurrency!!

Regular expressions

Higher order functions, lambda, functions that take functions

GUI?

make: interesting stuff
Go has a builtin function new which takes a type and allocates space on the
heap. The allocated space will be zero-initialized for the type. For example,
new(int) allocates a new int on the heap, initializes it with the value 0, and
returns its address, which has type *int. Unlike in C++, new is a function, not
an operator; new int is a syntax error.

Map and channel values must be allocated using the builtin function make. A
variable declared with map or channel type without an initializer will be
automatically initialized to nil. Calling make(map[int]int) returns a newly
allocated value of type map[int]int. Note that make returns a value, not a
pointer. This is consistent with the fact that map and channel values are
passed by reference. Calling make with a map type takes an optional argument
which is the expected capacity of the map. Calling make with a channel type
takes an optional argument which sets the buffering capacity of the channel;
the default is 0 (unbuffered).

The make function may also be used to allocate a slice. In this case it
allocates memory for the underlying array and returns a slice referring to it.
There is one required argument, which is the number of elements in the slice. A
second, optional, argument is the capacity of the slice. For example,
make([]int, 10, 20). This is identical to new([20]int)[0:10]. Since Go uses
garbage collection, the newly allocated array will be discarded sometime after
there are no references to the returned slice.
