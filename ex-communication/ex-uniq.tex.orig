\begin{Exercise}[title={Uniq},difficulty=0]
\label{ex:Uniq}
<<<<<<< HEAD
\Question\label{ex:Uniq q1} 编写一个 Go 程序模仿 Unix 命令 
\prog{uniq} 的功能。程序应当像下面这样运行，提供一个下面这样的列表：
=======
\Question\label{ex:Uniq q1} Write a Go program that mimics the function
of the Unix \prog{uniq} command. This program should work as follows,
given a list with the following items: 
>>>>>>> 9d3c4dbbba2dd6ce9e8c33dbfcbd0d7ca7842eb7

\begin{display}
'a' 'b' 'a' 'a' 'a' 'c' 'd' 'e' 'f' 'g'
\end{display}

<<<<<<< HEAD
它将打印出没有后续重复的项目：
=======
it should print only those item which don't have the same successor:
>>>>>>> 9d3c4dbbba2dd6ce9e8c33dbfcbd0d7ca7842eb7

\begin{display}
'a' 'b' 'a' 'c' 'd' 'e' 'f'
\end{display}
\exdisfix
<<<<<<< HEAD
下面列出的 \ref{src:uniq} 是 Perl 实现的算法。
\lstinputlisting[label=src:uniq,caption=uniq(1) 的 Perl 实现,language=Perl]{ex-communication/src/uniq.pl}
=======
Listing \ref{src:uniq} is a Perl implementation of the algorithm.
\lstinputlisting[label=src:uniq,caption=uniq(1) in Perl,language=Perl]{ex-communication/src/uniq.pl}
>>>>>>> 9d3c4dbbba2dd6ce9e8c33dbfcbd0d7ca7842eb7

\end{Exercise}

\begin{Answer}
<<<<<<< HEAD
\Question 下面是 uniq 的 Go 实现.
\lstinputlisting[caption=uniq(1) 的 Go 实现]{ex-communication/src/uniq.go}
=======
\Question The following is a uniq implementation in Go.
\lstinputlisting[caption=uniq(1) in Go]{ex-communication/src/uniq.go}
>>>>>>> 9d3c4dbbba2dd6ce9e8c33dbfcbd0d7ca7842eb7
\end{Answer}
